{"version":3,"file":"js/app.50c7ea7f.js","mappings":"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","sources":["webpack://s2g-parser-generator/./src/App.vue","webpack://s2g-parser-generator/./src/components/HelpSidebar.vue","webpack://s2g-parser-generator/./src/components/HelpSidebar.vue?cce8","webpack://s2g-parser-generator/./src/components/ParserSection.vue","webpack://s2g-parser-generator/./src/components/ParserSection.vue?5d4b","webpack://s2g-parser-generator/./src/components/FieldSection.vue","webpack://s2g-parser-generator/./src/components/FieldSection.vue?fb7e","webpack://s2g-parser-generator/./src/components/AddFieldButton.vue","webpack://s2g-parser-generator/./src/components/AddFieldButton.vue?694a","webpack://s2g-parser-generator/./src/utils/prism-setup.js","webpack://s2g-parser-generator/./src/App.vue?7ccd","webpack://s2g-parser-generator/./src/i18n/messages/navigation/de.js","webpack://s2g-parser-generator/./src/i18n/messages/parser/de.js","webpack://s2g-parser-generator/./src/i18n/locales/de.js","webpack://s2g-parser-generator/./src/i18n/messages/navigation/en.js","webpack://s2g-parser-generator/./src/i18n/messages/parser/en.js","webpack://s2g-parser-generator/./src/i18n/locales/en.js","webpack://s2g-parser-generator/./src/i18n/index.js","webpack://s2g-parser-generator/./src/main.js","webpack://s2g-parser-generator/webpack/bootstrap","webpack://s2g-parser-generator/webpack/runtime/chunk loaded","webpack://s2g-parser-generator/webpack/runtime/compat get default export","webpack://s2g-parser-generator/webpack/runtime/define property getters","webpack://s2g-parser-generator/webpack/runtime/global","webpack://s2g-parser-generator/webpack/runtime/hasOwnProperty shorthand","webpack://s2g-parser-generator/webpack/runtime/jsonp chunk loading","webpack://s2g-parser-generator/webpack/startup"],"sourcesContent":["<template>\n  <div class=\"flex h-screen flex-col\">\n    <!-- Header -->\n    <div class=\"bg-white p-4  border-b border-grey\">\n    <div class=\"  mx-2 flex justify-between items-center\">\n      <!-- Logo -->\n      <h1 class=\"text-lg font-semibold\"><i class=\"pi pi-bullseye me-3 text-black-500\"></i><a href=\"/\">Survey2GIS Parser Generator</a></h1>\n  \n      <!-- menu -->\n      <!-- Inside your navigation menu div -->\n        <div class=\"flex items-center gap-6\">\n\n\n        <!-- Import Options Dropdown -->\n\n\n        <div class=\"relative\" v-click-outside=\"closeDropdown\">\n  <button\n    @click=\"isDropdownOpen = !isDropdownOpen\"\n    class=\"px-4 py-2 border border-gray-300 flex items-center gap-2 bg-white hover:bg-gray-50 w-full transition-colors duration-200 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n  >\n    <span class=\"text-gray-700 font-medium px-2\">{{ $t('navigation.loadParser') }}</span>\n    <i \n      class=\"pi pi-chevron-down text-gray-500 transition-transform duration-200\"\n      :class=\"{'rotate-180': isDropdownOpen}\"\n    ></i>\n  </button>\n\n    <!-- Dropdown Menu -->\n    <div \n        v-if=\"isDropdownOpen\"\n        class=\"absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg z-10 w-full overflow-hidden\"\n    >\n        <div class=\"py-1\">\n        <label \n            for=\"file-upload\" \n            class=\"flex items-center px-4 py-3 hover:bg-gray-50 cursor-pointer w-full transition-colors duration-150\"\n            :class=\"{ 'opacity-50 cursor-not-allowed': uploadisDisabled }\"\n            @click.prevent=\"uploadisDisabled && triggerFileUpload\"\n        >\n            <i class=\"pi pi-upload text-blue-600 me-3\"></i>\n            <span class=\"text-gray-700\">{{ $t('navigation.uploadParser') }}</span>\n        </label>\n        \n        <button\n            class=\"w-full text-left flex items-center px-4 py-3 hover:bg-gray-50 transition-colors duration-150\"\n            :class=\"{ 'opacity-50 cursor-not-allowed': uploadisDisabled }\"\n\n            @click=\"uploadisDisabled && loadSampleData\"\n        >\n            <i class=\"pi pi-cloud-download text-blue-600 me-3\"></i>\n            <span class=\"text-gray-700\">{{ $t('navigation.loadSample') }}</span>\n        </button>\n        </div>\n    </div>\n\n    <input\n        type=\"file\"\n        accept=\".ini,.txt\"\n        @change=\"handleFileUpload\"\n        class=\"hidden\"\n        ref=\"fileInput\"\n        id=\"file-upload\"\n    />\n    </div>\n\n        <!-- Download Button -->\n        <button\n            @click=\"downloadIni\"\n            :disabled=\"!isFormValid\"\n            class=\"py-2 px-4 flex items-center gap-2 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2\"\n            :class=\"isFormValid \n            ? 'bg-green-600 hover:bg-green-700 text-white shadow-sm focus:ring-green-500' \n            : 'bg-gray-100 border border-gray-300 text-gray-400 cursor-not-allowed'\"\n        >\n            <i class=\"pi pi-download\"></i>\n            <span>{{ $t('navigation.download') }}</span>\n        </button>\n\n                <!-- Language Selector -->\n            <select\n                v-model=\"$i18n.locale\"\n                class=\"px-3 py-2 border border-gray-300  bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n            <option value=\"en\">En</option>\n            <option value=\"de\">De</option>\n        </select>\n\n        <!-- Help Links -->\n        <div class=\"flex items-center gap-4\">\n            <button \n            @click.stop=\"showHelp('imprint')\" \n            class=\"text-gray-600 hover:text-gray-900 transition-colors duration-200 text-sm font-medium\"\n            >\n            {{ $t('navigation.imprint') }}\n            </button>\n\n            <button \n            @click.stop=\"showHelp('help')\" \n            class=\"text-gray-600 hover:text-gray-900 transition-colors duration-200 text-sm font-medium\"\n            >\n            {{ $t('navigation.help') }}\n            </button>\n        </div>\n        </div>\n\n    </div>\n</div>\n\n    <!-- Main Content -->\n    <div class=\"flex flex-1 overflow-hidden\">\n      <!-- Left Panel -->\n      <div class=\"w-1/2 p-4 bg-gray-100 overflow-auto left-panel ps-6 pe-6 pt-6\" id=\"left_panel\">\n\n\n        <!-- Parser Section Card -->\n        <ParserSection\n          v-model=\"parserSection\"\n          :mandatory-fields=\"mandatoryFields.parser\"\n          :is-open=\"openSection === 'parser'\"\n          :show-start-label=\"showStartLabel\"\n          :started=\"hasStarted\" \n          @toggle-section=\"toggleSection\"\n          @help=\"showHelp\"\n          @started=\"hasStarted = true\"\n        />\n\n        <!-- Field Sections -->\n          <template v-for=\"(field, index) in fieldSections\" :key=\"index\">\n              <FieldSection\n                v-model=\"fieldSections[index]\"\n                :index=\"index\"\n                :is-open=\"openSection === index\"\n                :validation-errors=\"validationErrors\"\n                :mandatory-fields=\"mandatoryFields.field\"\n                @toggle-section=\"toggleSection\"\n                @help=\"showHelp\"\n                @remove=\"removeFieldSection\"\n                @validate=\"validateField\"\n              />\n          </template>\n\n        <!-- Add Field Button -->\n        <AddFieldButton \n          v-if=\"hasStarted\"\n          @add=\"addFieldSection\"\n        />\n      </div>\n\n      <!-- Right Panel -->\n      <div class=\"w-1/2 flex flex-col pb-4 ps-4\" id=\"right_panel\">\n        <div class=\"flex-grow overflow-auto code__wrapper\">\n          <pre class=\"rounded-lg\"><code class=\"language-ini code__field\">{{ generatedIni }}</code></pre>\n        </div>\n      </div>\n    </div>\n\n    <!-- Help Sidebar -->\n    <div \n  v-if=\"showHelpSidebar\" \n  class=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-end\"\n  @click.self=\"closeHelp\"\n>\n<HelpSidebar \n    :is-visible=\"showHelpSidebar\"\n    :section=\"currentHelpSection\"\n    @close=\"closeHelp\"\n  />\n\n  </div>\n      <!-- guid Notification -->\n      <div\n      v-if=\"showToast\"\n      class=\"fixed bottom-4 right-4 bg-white shadow-lg rounded-lg p-4 max-w-md border border-gray-200 transform transition-all duration-500 ease-in-out z-50\"\n      :class=\"showToast ? 'translate-y-0 opacity-100' : 'translate-y-full opacity-0'\"\n    >\n      <div class=\"flex items-start\">\n        <div class=\"flex-1 mr-4\">\n          <p class=\"text-gray-900\">\n            👋 Welcome! New here? Start  \n            <a \n              href=\"#\" \n              @click.prevent=\"showHelp('help')\" \n              class=\"text-blue-600 hover:text-blue-800 underline cursor-pointer\"\n            >\n              here\n            </a> \n          </p>\n        </div>\n        <button\n          @click=\"closeToast\"\n          class=\"text-gray-400 hover:text-gray-600 transition-colors\"\n        >\n          ✕\n        </button>\n      </div>\n    </div>\n</div>\n</template>\n\n\n\n<script>\nimport HelpSidebar from './components/HelpSidebar.vue'\nimport ParserSection from './components/ParserSection.vue'\nimport FieldSection from './components/FieldSection.vue'\nimport AddFieldButton from './components/AddFieldButton.vue'\nimport { useI18n } from 'vue-i18n'\nimport {\n    ref,\n    watch,\n    onMounted,\n    nextTick,\n    computed\n} from 'vue'\nimport {\n    setupPrism,\n    highlightElement\n} from './utils/prism-setup'\nimport 'primeicons/primeicons.css'\nimport 'prismjs/themes/prism-tomorrow.css'\n\n// Initialize Prism syntax highlighting\nsetupPrism()\n\nexport default {\n    name: 'Survey2GISGenerator',\n\n    components: {\n        HelpSidebar,\n        ParserSection,\n        FieldSection,\n        AddFieldButton\n    },\n\n    setup() {\n        const hasStarted = ref(false);\n        const { t } = useI18n()\n        const uploadisDisabled = ref(true)\n\n        // State management using refs\n        const state = {\n            parserSection: ref({\n                info: '',\n                name: '',\n                comment_mark: '#',\n                coor_x: 'COORX',\n                coor_y: 'COORY',\n                coor_z: 'COORZ',\n                geom_tag_point: '.',\n                geom_tag_line: '$',\n                geom_tag_poly: '@',\n                key_field: '',\n                key_unique: 'No',\n                no_data: '-1',\n                tag_field: '',\n                tagging_mode: 'none',\n                tag_strict: 'No',\n                hasStarted: ref(false)\n            }),\n            fieldSections: ref([]),\n            validationErrors: ref({}),\n            openSection: ref(''),\n            showHelpSidebar: ref(false),\n            currentHelpSection: ref(''),\n            showStartLabel: ref(true),\n            isDropdownOpen: ref(false),\n            generatedIni: ref(`# ${t('parser.code_comment')}`),\n            fileError: ref(''),\n            showTooltip: ref(null),\n            openFieldIndex: ref(null),\n            showToast: ref(false)\n        }\n\n        watch(() => t('parser.code_comment'), (newComment) => {\n            if (!state.generatedIni.value.includes('=')) {  // Only update if it's still the initial comment\n                state.generatedIni.value = `# ${newComment}`\n            }\n        })\n\n        // Constants\n        const mandatoryFields = {\n            parser: ['name', 'coor_x', 'coor_y', 'coor_z'],\n            field: ['name', 'type']\n        }\n\n        const defaults = {\n            comment_mark: '#',\n            coor_x: 'COORX',\n            coor_y: 'COORY',\n            coor_z: 'COORZ',\n            geom_tag_point: '.',\n            geom_tag_line: '$',\n            geom_tag_poly: '@',\n            no_data: '-1'\n        }\n\n\n        // Computed properties\n\nconst isFormValid = computed(() => {\n    // Check parser section\n    const isParserValid = mandatoryFields.parser.every(field =>\n        state.parserSection.value[field] &&\n        state.parserSection.value[field].trim() !== ''\n    )\n\n    // Check field sections including aliases\n    const areFieldSectionsValid = state.fieldSections.value.every((field, index) => {\n        // Check mandatory fields\n        const mandatoryFieldsValid = mandatoryFields.field.every(fieldName =>\n            field[fieldName] && field[fieldName].trim() !== ''\n        )\n\n        // Check for any validation errors in this field section\n        const hasValidationErrors = Object.keys(state.validationErrors.value)\n            .some(key => key.startsWith(`field-${index}`))\n\n        return mandatoryFieldsValid && !hasValidationErrors\n    })\n\n    return isParserValid && areFieldSectionsValid && state.fieldSections.value.length > 0\n})\n\n\n\n        const isParserSectionInvalid = () => {\n            return mandatoryFields.parser.some(field =>\n                !state.parserSection.value[field] ||\n                state.parserSection.value[field].trim() === ''\n            )\n        }\n\n        \n\n\n\n        // Methods for field management\n        const fieldManagement = {\n            isFieldSectionInvalid: (fieldIndex) => {\n                const field = state.fieldSections.value[fieldIndex]\n\n                if (state.validationErrors.value[`field-${fieldIndex}`]) {\n                    return true\n                }\n\n                return mandatoryFields.field.some(fieldName =>\n                    !field[fieldName] || field[fieldName].trim() === ''\n                )\n            },\n\n            validateField: (fieldIndex, fieldName, value) => {\n    if (fieldName === 'aliases') {\n        if (value) { // value here is the validation error\n            state.validationErrors.value = {\n                ...state.validationErrors.value,\n                [`field-${fieldIndex}-aliases`]: value\n            }\n        } else {\n            const newErrors = { ...state.validationErrors.value }\n            delete newErrors[`field-${fieldIndex}-aliases`]\n            state.validationErrors.value = newErrors\n        }\n        return\n    }\n\n    // Existing name validation logic\n    const errors = fieldManagement.validateFieldName(value)\n    if (errors.length > 0) {\n        state.validationErrors.value = {\n            ...state.validationErrors.value,\n            [`field-${fieldIndex}`]: errors\n        }\n    } else {\n        const newErrors = { ...state.validationErrors.value }\n        delete newErrors[`field-${fieldIndex}`]\n        state.validationErrors.value = newErrors\n    }\n},\n\n            validateFieldName: (name) => {\n                const errors = []\n                if (name.length > 10) {\n                    errors.push('Field name must be 10 characters or less')\n                }\n                if (!/^[A-Za-z0-9_]*$/.test(name)) {\n                    errors.push('Field name can only contain letters, numbers, and underscores')\n                }\n                return errors\n            },\n\n            addFieldSection: () => {\n                const newField = {\n                    name: '',\n                    change_case: 'lower',\n                    empty_allowed: 'no',\n                    info: '',\n                    merge_separators: 'no',\n                    persistent: 'no',\n                    quotation: \"'\",\n                    skip: 'no',\n                    separator: ';',\n                    type: 'text',\n                    unique: 'no',\n                    aliases: ''\n                }\n                state.fieldSections.value.push(newField)\n                state.openSection.value = state.fieldSections.value.length - 1\n                scrollManagement.scrollToSection(state.fieldSections.value.length - 1)\n            },\n\n            removeFieldSection: (fieldIndex) => {\n                state.fieldSections.value.splice(fieldIndex, 1)\n                const newErrors = {\n                    ...state.validationErrors.value\n                }\n                delete newErrors[`field-${fieldIndex}`]\n                state.validationErrors.value = newErrors\n\n                if (state.openSection.value === fieldIndex) {\n                    state.openSection.value = null\n                } else if (typeof state.openSection.value === 'number' && state.openSection.value > fieldIndex) {\n                    state.openSection.value--\n                }\n\n                generateIni()\n            }\n        }\n\n        // Methods for scroll management\n        // Todo: improve scolling\n        const scrollManagement = {\n            scrollToSection: (section) => {\n                nextTick(() => {\n                    const scrollContainer = document.querySelector('.code__wrapper');\n                    const preElement = document.querySelector('.code__field');\n                    const leftPanelItems = document.querySelectorAll('.left-panel .section');\n\n                    if (!scrollContainer || !preElement || !leftPanelItems.length) {\n                        console.error('Required elements not found');\n                        return;\n                    }\n\n                    console.log('Left Panel Items:', leftPanelItems); // Log all left panel items for inspection\n\n                    const lines = state.generatedIni.value.split('\\n');\n                    let targetLineIndex = 0;\n\n                    // Locate the line for the desired section\n                    if (section === 'parser') {\n                        targetLineIndex = lines.findIndex(line => line.trim() === '[Parser]');\n                    } else {\n                        let fieldCount = -1;\n                        targetLineIndex = lines.findIndex((line) => {\n                            if (line.trim() === '[Field]') {\n                                fieldCount++;\n                                if (fieldCount === section) {\n                                    return true;\n                                }\n                            }\n                            return false;\n                        });\n                    }\n\n                    if (targetLineIndex === -1) {\n                        console.error('Target section not found');\n                        return;\n                    }\n\n                    const lineHeight = parseInt(window.getComputedStyle(preElement).lineHeight) || 20;\n                    const scrollPosition = targetLineIndex * lineHeight;\n\n                    // Locate the corresponding left panel item\n                    let leftPanelItem;\n                    if (section === 'parser') {\n                        // Special case for the 'parser' section\n                        console.log('Looking for parser in the left panel'); // Debug log\n                        leftPanelItem = Array.from(leftPanelItems).find(item => item.textContent.includes('Parser')); // Update this if needed\n                    } else {\n                        leftPanelItem = leftPanelItems[section];\n                    }\n\n                    console.log('Left Panel Item for Section:', leftPanelItem); // Log the item for inspection\n\n                    if (!leftPanelItem) {\n                        console.error(`Left panel item for section ${section} not found`);\n                        return;\n                    }\n\n                    const leftPanelY = leftPanelItem.getBoundingClientRect().top;\n                    const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\n                    let targetScrollPosition = scrollPosition + (leftPanelY - scrollContainerTop);\n\n                    // Define an offset for the first few sections, including 'parser'\n                    const initialSectionOffset = 30; // Adjust as needed for the padding\n                    if (section === 'parser' || section <= 2) { // Apply threshold for initial sections\n                        targetScrollPosition -= initialSectionOffset;\n                    }\n\n                    scrollContainer.scrollTo({\n                        top: Math.max(0, targetScrollPosition),\n                        behavior: 'smooth'\n                    });\n                });\n            },\n            toggleSection: (section) => {\n                const wasOpen = state.openSection.value === section;\n                state.openSection.value = wasOpen ? null : section;\n\n                if (!wasOpen && section !== null) {\n                    scrollManagement.scrollToSection(section);\n                }\n            }\n        };\n\n        // Methods for file handling\n// In App.vue\nconst fileHandling = {\n    // Helper function for alias validation (inside fileHandling)\n    validateAliases: (aliases) => {\n        if (!aliases) return null // Empty is valid\n\n        const lines = aliases.split('\\n').filter(line => line.trim())\n        const keys = new Set()\n        const lowercaseKeys = new Set()\n\n        for (const line of lines) {\n            if (!line.startsWith('@')) {\n                return 'Each line must start with @'\n            }\n\n            const [keyPart, ...valueParts] = line.substring(1).split('=')\n            const key = keyPart.trim()\n            const value = valueParts.join('=').trim()\n            \n            if (!key || !value) {\n                return 'Each line must be in format @key=value'\n            }\n\n            // Check for special characters and German umlauts\n            const specialCharsRegex = /[^a-zA-Z0-9_]/\n            if (specialCharsRegex.test(key) || specialCharsRegex.test(value)) {\n                return 'Keys and values can only contain letters, numbers, and underscores'\n            }\n\n            // Check for duplicate keys (case-sensitive)\n            if (keys.has(key)) {\n                return `Duplicate key found: ${key}`\n            }\n            keys.add(key)\n\n            // Check for duplicate keys (case-insensitive)\n            const lowercaseKey = key.toLowerCase()\n            if (lowercaseKeys.has(lowercaseKey) && !keys.has(key)) {\n                return `Case-insensitive duplicate key found: ${key}`\n            }\n            lowercaseKeys.add(lowercaseKey)\n        }\n\n        return null // No validation errors\n    },\n\n    loadSampleData: () => {\n        const samplePath = './parser/parser_desc_min.txt'\n        fetch(samplePath)\n            .then(response => response.text())\n            .then(content => {\n                fileHandling.parseIniContent(content)\n                uiManagement.closeDropdown()\n            })\n            .catch(error => {\n                state.fileError.value = `Error loading sample data: ${error.message}`\n            })\n    },\n\n    handleFileUpload: async (event) => {\n        const file = event.target.files[0]\n        if (!file) {\n            state.fileError.value = 'No file selected'\n            return\n        }\n\n        if (!file.name.toLowerCase().endsWith('.ini') && !file.name.toLowerCase().endsWith('.txt')) {\n            state.fileError.value = 'Invalid file type. Please upload an .ini or .txt file'\n            return\n        }\n\n        try {\n            const content = await fileHandling.readFileContent(file)\n            fileHandling.parseIniContent(content)\n            state.fileError.value = ''\n        } catch (error) {\n            state.fileError.value = `Error reading file: ${error.message}`\n        }\n    },\n\n    readFileContent: (file) => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader()\n\n            reader.onload = (event) => {\n                try {\n                    resolve(event.target.result)\n                } catch (error) {\n                    reject(error)\n                }\n            }\n\n            reader.onerror = (event) => {\n                reject(new Error(event.target.error))\n            }\n\n            reader.readAsText(file)\n        })\n    },\n\n    parseIniContent: (content) => {\n        try {\n            // Reset current state\n            state.parserSection.value = {\n                info: '',\n                name: '',\n                comment_mark: '#',\n                coor_x: 'COORX',\n                coor_y: 'COORY',\n                coor_z: 'COORZ',\n                geom_tag_point: '.',\n                geom_tag_line: '$',\n                geom_tag_poly: '@',\n                key_field: '',\n                key_unique: 'No',\n                no_data: '-1',\n                tag_field: '',\n                tagging_mode: 'none',\n                tag_strict: 'No'\n            }\n            state.fileError.value = '' // Clear any previous global errors\n            state.validationErrors.value = {} // Reset validation errors\n\n            hasStarted.value = true\n            state.openSection.value = 'parser'\n\n            let currentSection = null\n            let currentAliases = []\n            let currentFieldIndex = -1\n            const lines = content.split('\\n')\n\n            for (let line of lines) {\n                line = line.trim()\n\n                if (!line || line.startsWith('#')) continue\n\n                // Handle new section\n                if (line.startsWith('[') && line.endsWith(']')) {\n                    // Process aliases for the previous field section before moving to new section\n                    if (currentSection === 'field' && currentAliases.length > 0 && \n                        state.fieldSections.value.length > 0) {\n                        const currentField = state.fieldSections.value[state.fieldSections.value.length - 1]\n                        const aliasesString = currentAliases.join('\\n')\n                        \n                        // Validate aliases before assigning\n                        const validationError = fileHandling.validateAliases(aliasesString)\n                        if (validationError) {\n                            state.validationErrors.value[`field-${currentFieldIndex}-aliases`] = validationError\n                        }\n                        currentField.aliases = aliasesString\n                    }\n                    \n                    currentSection = line.slice(1, -1).toLowerCase()\n                    currentAliases = [] // Reset aliases for new section\n                    \n                    if (currentSection === 'field') {\n                        currentFieldIndex++\n                        state.fieldSections.value.push({\n                            change_case: 'lower',\n                            empty_allowed: 'no',\n                            info: '',\n                            merge_separators: 'no',\n                            name: '',\n                            persistent: 'no',\n                            quotation: \"'\",\n                            skip: 'no',\n                            separator: ';',\n                            type: 'text',\n                            unique: 'no',\n                            aliases: ''\n                        })\n                    }\n                    continue\n                }\n\n                // Handle line content\n                if (currentSection) {\n                    if (line.startsWith('@')) {\n                        // This is an alias line\n                        currentAliases.push(line)\n                    } else if (line.includes('=')) {\n                        // This is a regular property\n                        const [key, ...valueParts] = line.split('=')\n                        const trimmedKey = key.trim()\n                        const value = valueParts.join('=').trim()\n\n                        if (currentSection === 'parser') {\n                            if (trimmedKey in state.parserSection.value) {\n                                state.parserSection.value[trimmedKey] = value\n                            }\n                        } else if (currentSection === 'field' && state.fieldSections.value.length > 0) {\n                            const currentField = state.fieldSections.value[state.fieldSections.value.length - 1]\n                            if (trimmedKey in currentField) {\n                                currentField[trimmedKey] = value\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Don't forget to process aliases for the last field section\n            if (currentSection === 'field' && currentAliases.length > 0 && \n            state.fieldSections.value.length > 0) {\n            const currentField = state.fieldSections.value[state.fieldSections.value.length - 1]\n            const aliasesString = currentAliases.join('\\n')\n            \n            // Validate aliases before assigning\n            const validationError = fileHandling.validateAliases(aliasesString)\n            if (validationError) {\n                // Instead of setting fileError, set it in validationErrors\n                state.validationErrors.value[`field-${currentFieldIndex}-aliases`] = [validationError]\n            }\n            currentField.aliases = aliasesString\n        }\n\n            // Validate field names\n            state.fieldSections.value.forEach((field, index) => {\n                fieldManagement.validateField(index, field.name)\n            })\n\n            generateIni()\n        } catch (error) {\n        state.fileError.value = `Error parsing INI content: ${error.message}`\n        console.error('Error parsing INI content:', error)\n    }\n    }\n}\n\n        // UI management methods\n        const uiManagement = {\n            showHelp: (section) => {\n                state.currentHelpSection.value = section\n                state.showHelpSidebar.value = true\n            },\n\n            closeHelp: () => {\n                state.showHelpSidebar.value = false\n                state.currentHelpSection.value = ''\n            },\n\n            closeToast: () => {\n                state.showToast.value = false\n            },\n\n            closeDropdown: () => {\n                state.isDropdownOpen.value = false\n            },\n\n            triggerFileUpload: () => {\n                document.querySelector('#file-upload').click()\n            }\n        }\n\n        // INI generation and download\n        const generateIni = () => {\n    let ini = '[Parser]\\n'\n    \n    // Add parser section properties\n    const parserEntries = Object.entries(state.parserSection.value)\n        .filter(([value]) => value !== '')\n        .map(([key, value]) => `${key} = ${value}`)\n        .join('\\n')\n    ini += parserEntries\n\n    // Add field sections\n    state.fieldSections.value.forEach((field) => {\n        ini += '\\n\\n[Field]\\n'\n        \n        // Add regular fields\n        const regularFields = Object.entries(field)\n            .filter(([key, value]) => key !== 'aliases' && value !== '')\n            .map(([key, value]) => `${key} = ${value}`)\n            .join('\\n')\n        ini += regularFields\n\n        // Add aliases if they exist\n        if (field.aliases) {\n            const validAliases = field.aliases\n                .split('\\n')\n                .filter(line => line.trim() && !line.includes('error'))\n                .map(line => {\n                    line = line.trim()\n                    if (line.startsWith('@')) {\n                        // Always normalize to single spaces around equals\n                        const [keyPart, ...valueParts] = line.split('=')\n                        const key = keyPart.trim()  // Removes all spaces after @\n                        const value = valueParts.join('=').trim()\n                        return `${key} = ${value}`  // Consistent single space format\n                    }\n                    return line\n                })\n                .join('\\n')\n            if (validAliases) {\n                ini += regularFields ? '\\n' : ''\n                ini += validAliases\n            }\n        }\n    })\n\n    state.generatedIni.value = ini + '\\n'\n}\n\n        const downloadIni = () => {\n            const blob = new Blob([state.generatedIni.value], {\n                type: 'text/plain'\n            })\n            const url = window.URL.createObjectURL(blob)\n            const link = document.createElement('a')\n            link.href = url\n            link.download = 'survey2gis_parser.ini'\n            document.body.appendChild(link)\n            link.click()\n            document.body.removeChild(link)\n            window.URL.revokeObjectURL(url)\n        }\n\n\n\n        // Lifecycle hooks\n        onMounted(() => {\n    const scrollContainer = document.querySelector('.code__wrapper')\n    if (scrollContainer) {\n        scrollContainer.style.overflowY = 'auto'\n        scrollContainer.style.position = 'relative'\n    }\n\n    // Set up watches here\n    // Watch for syntax highlighting\n    watch(\n        () => state.generatedIni.value,\n        () => {\n            nextTick(() => {\n                document.querySelectorAll('pre code').forEach((block) => {\n                    highlightElement(block)\n                })\n            })\n        },\n        { immediate: true }\n    )\n\n    // Watch for content changes including validation errors\n    watch(\n        [\n            () => state.parserSection.value, \n            () => state.fieldSections.value,\n            () => state.validationErrors.value // This will make form validation reactive to alias errors\n        ],\n        () => {\n            generateIni()\n        },\n        { deep: true }\n    )\n\n    state.showToast.value = true\n    setTimeout(() => {\n        uiManagement.closeToast()\n    }, 10000)\n})\n\n\n\n\n\n        return {\n            ...state,\n            hasStarted,\n            mandatoryFields,\n            isParserSectionInvalid,\n            isFormValid,\n            ...fieldManagement,\n            ...scrollManagement,\n            ...fileHandling,\n            ...uiManagement,\n            generateIni,\n            downloadIni,\n            uploadisDisabled,\n            getDefaultValue: (key) => defaults[key] ? `Default: ${defaults[key]}` : ''\n        }\n    }\n}\n</script>\n<style>\n\n#right_panel {\n  background: #2d2d2d;\n}\n\n/* Additional styling for Prism */\n.code__wrapper pre {\n  margin: 0;\n  padding: 1rem;\n}\n\n.code__wrapper pre code {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;\n  font-size: 0.875rem;\n  line-height: 1.5;\n}\n\n/* Override some Prism theme colors if needed */\n.token.section {\n  color: #79b8ff !important;\n}\n\n.token.key {\n  color: #e1e4e8 !important;\n}\n\n.token.value {\n  color: #85e89d !important;\n}\n\n.token.comment {\n  color: #959da5 !important;\n  font-style: italic;\n}\n</style>","<!-- HelpSidebar.vue -->\n<template>\n    <div \n      v-if=\"isVisible\" \n      class=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-end\"\n      @click.self=\"close\"\n    >\n      <div class=\"w-1/2 bg-white h-full p-4 overflow-y-auto\">\n        <div class=\"flex justify-between items-center mb-1\">\n          <h1 class=\"text-xl font-semibold\">{{ title }}</h1>\n          <button @click=\"close\" class=\"text-gray-500 hover:text-gray-700\">\n            <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n  \n        <!-- Parser Section Help Content -->\n        <div v-if=\"section === 'parser'\" class=\"prose prose-sm\">\n          \n          <div class=\"mb-8\">\n            <p class=\"text-gray-600 mb-1\">\n                This guide explains how to configure the parser section [Parser] in your configuration file. Each option controls specific aspects of how your input data is processed and interpreted.\n            </p>\n        </div>\n\n        <div class=\"space-y-8\">\n            <!-- Required Options Section -->\n            <div class=\"border-b pb-6\">\n                <h4 class=\"text-xl font-semibold mb-1 text-blue-600\">Required Options</h4>\n                \n                <div class=\"grid gap-6\">\n                    <div class=\"bg-gray-50 p-6 rounded-lg\">\n                        <h3 class=\"font-semibold text-gray-800 text-lg\">Coordinates (Required)</h3>\n                        <div class=\"mt-3 space-y-3\">\n                            <p class=\"text-gray-600\">Specifies which fields in your input data contain the spatial coordinates of your measurements. The X and Y coordinates are mandatory, while Z is optional.</p>\n                            \n                            <ul class=\"list-disc list-inside text-gray-600 ml-4 space-y-1\">\n                                <li><span class=\"font-medium\">coor x, coor y:</span> Must be specified and reference existing numeric fields of type \"double\"</li>\n                                <li><span class=\"font-medium\">coor z:</span> Optional - if not specified, Z coordinates default to 0.0</li>\n                            </ul>\n                            \n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                coor x = xfield<br>\n                                coor y = yfield<br>\n                                coor z = zfield\n                            </code>\n                        </div>\n                    </div>\n\n                    <div class=\"bg-gray-50 p-6 rounded-lg\">\n                        <h3 class=\"font-semibold text-gray-800 text-lg\">Geometry Tags (Required)</h3>\n                        <div class=\"mt-3 space-y-3\">\n                            <p class=\"text-gray-600\">Defines special markers that identify different types of geometries in your data. These tags allow the parser to convert simple point measurements into complex geometries like lines and polygons.</p>\n                            \n                            <ul class=\"list-disc list-inside text-gray-600 ml-4 space-y-1\">\n                                <li><span class=\"font-medium\">geom tag point:</span> Marks point features (optional in some parser modes)</li>\n                                <li><span class=\"font-medium\">geom tag line:</span> Marks line features</li>\n                                <li><span class=\"font-medium\">geom tag poly:</span> Marks polygon features</li>\n                            </ul>\n                            \n                            <p class=\"text-gray-600\">You can define up to 32 tags per geometry type, but they must be unique and not overlap with field separators or quotation marks.</p>\n                            \n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                geom tag point = \"*\"<br>\n                                geom tag line = \"-\"<br>\n                                geom tag poly = \"@\"<br>\n                                geom tag poly = \"@ \"  # Alternative polygon tag\n                            </code>\n                        </div>\n                    </div>\n\n                    <div class=\"bg-gray-50 p-6 rounded-lg\">\n                        <h3 class=\"font-semibold text-gray-800 text-lg\">Key Field (Required for some modes)</h3>\n                        <div class=\"mt-3 space-y-3\">\n                            <p class=\"text-gray-600\">Specifies the field that contains identifier values linking multiple measurements that belong to the same geometry (like points in a line or polygon).</p>\n                            \n                            <ul class=\"list-disc list-inside text-gray-600 ml-4 space-y-1\">\n                                <li>Mandatory for parser modes \"End\" and \"Max\"</li>\n                                <li>All measurements with the same key value are considered part of the same geometry</li>\n                                <li>Can be used with \"key unique\" option to handle multi-part geometries</li>\n                            </ul>\n                            \n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                key field = key<br>\n                                key unique = yes  # Optional, for multi-part geometries\n                            </code>\n                        </div>\n                    </div>\n\n                    <div class=\"bg-gray-50 p-6 rounded-lg\">\n                        <h3 class=\"font-semibold text-gray-800 text-lg\">Tagging Mode (Required)</h3>\n                        <div class=\"mt-3 space-y-3\">\n                            <p class=\"text-gray-600\">Determines how the parser interprets geometry tags and processes measurements into features.</p>\n                            \n                            <ul class=\"list-disc list-inside text-gray-600 ml-4 space-y-1\">\n                                <li><span class=\"font-medium\">min:</span> Minimal tagging - typically used when each geometry has one record with complete attributes</li>\n                                <li><span class=\"font-medium\">max:</span> Maximum tagging - for complex geometries with multiple attribute records</li>\n                                <li><span class=\"font-medium\">end:</span> End tagging - processes geometries based on ending markers</li>\n                                <li><span class=\"font-medium\">none:</span> No tagging - treats all records as simple point measurements</li>\n                            </ul>\n                            \n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                tagging mode = end\n                            </code>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Optional Options Section -->\n            <div>\n                <h4 class=\"text-xl font-semibold mb-1 text-green-600\">Optional Settings</h4>\n                \n                <div class=\"grid gap-6\">\n                    <div class=\"bg-gray-50 p-6 rounded-lg\">\n                        <h3 class=\"font-semibold text-gray-800 text-lg\">Comment Mark</h3>\n                        <div class=\"mt-3 space-y-3\">\n                            <p class=\"text-gray-600\">Defines special characters that mark the beginning of comments in your input data. Any text after these markers will be ignored during processing.</p>\n                            \n                            <ul class=\"list-disc list-inside text-gray-600 ml-4\">\n                                <li>Multiple comment marks can be specified</li>\n                                <li>Must not conflict with field separators or quotation marks</li>\n                            </ul>\n                            \n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                comment mark = #<br>\n                                comment mark = //\n                            </code>\n                        </div>\n                    </div>\n\n                    <div class=\"bg-gray-50 p-6 rounded-lg\">\n                        <h4 class=\"font-semibold text-gray-800 text-lg\">No Data Value</h4>\n                        <div class=\"mt-3 space-y-3\">\n                            <p class=\"text-gray-600\">Specifies an integer value to represent null or missing data in your attributes. This value should be unique and not appear in valid data.</p>\n                            \n                            <p class=\"text-gray-600\">This value will be written to output files when a field is empty or contains no valid data.</p>\n                            \n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                no data = -99999\n                            </code>\n                        </div>\n                    </div>\n\n                    <div class=\"bg-gray-50 p-6 rounded-lg\">\n                        <h4 class=\"font-semibold text-gray-800 text-lg\">Tag Strict Mode</h4>\n                        <div class=\"mt-3 space-y-3\">\n                            <p class=\"text-gray-600\">Controls how strictly the parser enforces geometry tagging rules. When enabled, every measurement must contain a valid geometry tag or it will be discarded.</p>\n                            \n                            <p class=\"text-gray-600\">Defaults to \"off\" if not specified. Enable this for stricter data validation.</p>\n                            \n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                tag strict = yes\n                            </code>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"mt-8 p-6 bg-blue-50 rounded-lg\">\n            <h4 class=\"font-semibold text-blue-800 mb-3 text-lg\">Important Considerations</h4>\n            <ul class=\"list-disc list-inside space-y-1 text-blue-700\">\n                <li>All geometry tags must be unique and not overlap with other special characters</li>\n                <li>Coordinate fields must be numeric and of type \"double\"</li>\n                <li>When using the key field, consider whether your geometries might have multiple parts</li>\n                <li>The parser mode significantly affects how your data is processed - choose carefully</li>\n                <li>Tag strict mode can help catch data errors but may discard valid measurements if not properly tagged</li>\n            </ul>\n        </div>\n\n        </div>\n  \n        <!-- Imprint  Content -->\n        <div v-if=\"section === 'imprint'\" class=\"prose prose-sm\">\n\n        <!-- Contact Information Card -->\n        <div class=\"bg-white rounded-lg mb-3 mt-6\">\n            <h4 class=\"text-xl font-bold text-gray-800 mb-1\">Anbieter</h4>\n            <div class=\"space-y-1 text-gray-600\">\n                <p class=\"font-medium\">\n                    Landesamt für Denkmalpflege im Regierungspräsidium Stuttgart<br>\n                    Berliner Straße 12<br>\n                    73728 Esslingen (Neckar)</p>\n            </div>\n            \n\n        </div>\n\n        <!-- Usage Terms Card -->\n        <div class=\"bg-white rounded-lg mb-3\">\n            <h4 class=\"text-xl font-bold text-gray-800 mb-1\">Hinweise zur Nutzung</h4>\n            <ol class=\"list-decimal list-inside space-y-3 text-gray-600\">\n                <li>Das Nutzungsrecht wird Ihnen unentgeltlich eingeräumt.</li>\n                <li>\n                    Das Landesamt für Denkmalpflege Baden-Württemberg im Regierungspräsidium Stuttgart \n                    übernimmt keine Haftung für Hard- oder Softwareschäden, die durch die Anwendung \n                    dieser Anwendung verursacht werden.\n                </li>\n                <li>\n                    Es wird keinerlei Support für die Software gewährleistet. Das LAD und CSGIS haften \n                    nicht für Fahrlässigkeit. Eine Haftung für mittelbare Schäden oder die \n                    Wiederbeschaffung von Daten wird ausgeschlossen.\n                </li>\n                <li>\n                    Die Seite verwendet keine Cookies.\n                </li>\n                <li>\n                    Es werden keine Daten serverseitig verarbeitet oder gespeichert.\n                </li>\n            </ol>\n        </div>\n\n        <!-- Team Information Card -->\n        <div class=\"bg-white rounded-lg mb-3\">\n            <h4 class=\"text-xl font-bold text-gray-800 mb-1\">Projektteam</h4>\n            <ul class=\"space-y-1 text-gray-600\">\n                <li>Jonas Abele</li>\n                <li>Claus Brenner</li>\n                <li>José Canalejo</li>\n                <li>Toni Schönbuchner</li>\n            </ul>\n        </div>\n\n        <!-- Implementation Details Card -->\n        <div class=\"bg-white rounded-lg \">\n            <h4 class=\"text-xl font-bold text-gray-800 mb-1\">Projektumsetzung</h4>\n            <div class=\"text-gray-600\">\n                <p class=\"font-medium\">CSGIS GbR</p>\n                <p>Am Eichbüchl 7</p>\n                <p>D - 82223 Eichenau</p>\n                <a href=\"http://www.csgis.de\" target=\"_blank\" rel=\"noopener noreferrer\" \n                   class=\"text-blue-600 hover:text-blue-800 mt-2 inline-block\">\n                    www.csgis.de\n                </a>\n            </div>\n        </div>\n        </div>\n\n        <!-- Help  Content -->\n        <div v-if=\"section === 'help'\" class=\"prose prose-sm\">\n          <p class=\"text-lg text-gray-600 mb-8\">A web tool to create parser files for Survey2GIS.</p>\n\n                <!-- Quick Start -->\n                <div class=\"bg-blue-50 rounded-lg p-6 mb-8\">\n                <h4 class=\"text-xl font-semibold text-blue-900 mb-4\">🚀 Quick Start</h4>\n                <ol class=\"space-y-2 text-blue-900\">\n                    <li>1. Start with the <span class=\"font-semibold\">Parser Section</span> at the top</li>\n                    <li>2. Fill in the required fields (marked with <span class=\"text-red-500\">*</span>)</li>\n                    <li>3. Add <span class=\"font-semibold\">Field Sections</span> for each data field</li>\n                    <li>4. Download your configuration file</li>\n                </ol>\n                </div>\n\n                <!-- Required Settings -->\n                <div class=\"mb-8\">\n                <h4 class=\"text-xl font-semibold text-gray-900 mb-4\">Required Settings</h4>\n\n                <!-- Parser Section -->\n                <div class=\"bg-white shadow rounded-lg p-6 mb-6\">\n                    <h4 class=\"text-lg font-semibold text-gray-900 mb-3\">⚙️ Parser Section</h4>\n                    <p class=\"text-gray-600 mb-2\">These fields must be filled out:</p>\n                    <ul class=\"space-y-2 text-gray-700\">\n                    <li class=\"flex items-start\">\n                        <span class=\"font-semibold min-w-[100px]\">Name:</span>\n                        <span>Your configuration name</span>\n                    </li>\n                    <li class=\"flex items-start\">\n                        <span class=\"font-semibold min-w-[100px]\">COORX:</span>\n                        <span>Field name for X coordinates</span>\n                    </li>\n                    <li class=\"flex items-start\">\n                        <span class=\"font-semibold min-w-[100px]\">COORY:</span>\n                        <span>Field name for Y coordinates</span>\n                    </li>\n                    </ul>\n                </div>\n\n                <!-- Field Sections -->\n                <div class=\"bg-white shadow rounded-lg p-6\">\n                    <h4 class=\"text-lg font-semibold text-gray-900 mb-3\">📝 Field Sections</h4>\n                    <p class=\"text-gray-600 mb-3\">For each field you need to specify:</p>\n                    <div class=\"space-y-4\">\n                    <div>\n                        <h4 class=\"font-semibold text-gray-900\">Name</h4>\n                        <p class=\"text-gray-600\">Maximum 10 characters, letters, numbers, and underscores only</p>\n                    </div>\n                    <div>\n                        <h4 class=\"font-semibold text-gray-900\">Type</h4>\n                        <ul class=\"list-disc ml-5 text-gray-600\">\n                        <li>integer (whole numbers)</li>\n                        <li>double (decimal numbers)</li>\n                        <li>text (text strings)</li>\n                        </ul>\n                    </div>\n                    </div>\n                </div>\n                </div>\n\n                <!-- Common Tasks -->\n                <div class=\"mb-8\">\n                <h4 class=\"text-xl font-semibold text-gray-900 mb-4\">Common Tasks</h4>\n                \n                <!-- Creating Fields -->\n                <div class=\"bg-white shadow rounded-lg p-6 mb-6\">\n                    <h4 class=\"text-lg font-semibold text-gray-900 mb-3\">Creating a New Field</h4>\n                    <ol class=\"space-y-2 text-gray-600\">\n                    <li>1. Click the \"Add Field Section\" button</li>\n                    <li>2. Fill in the required Name and Type</li>\n                    <li>3. Adjust optional settings as needed</li>\n                    </ol>\n                </div>\n        </div>\n\n\n\n            <!-- Parser Modes Section -->\n            <div class=\"mt-12\">\n                <h4 class=\"text-xl font-semibold mb-3 text-green-600\">Parser Modes</h4>\n                <div class=\"bg-gray-50 p-6 rounded-lg\">\n                    <h4 class=\"font-semibold text-gray-800 mb-1\">Understanding Geometry Processing</h4>\n                    \n                    <div class=\"space-y-6\">\n                        <div>\n                            <h4 class=\"font-medium text-gray-700\">Key Limitations</h4>\n                            <ul class=\"list-disc list-inside text-gray-600 ml-4\">\n                                <li>Vertices of a single geometry must be in one file</li>\n                                <li>Vertex measurements can only be interrupted by comments/empty lines</li>\n                                <li>Available geometry types: point, line, polygon</li>\n                            </ul>\n                        </div>\n\n                        <div>\n                            <h4 class=\"font-medium text-gray-700\">Geometry Markers</h4>\n                            <ul class=\"list-disc list-inside text-gray-600 ml-4\">\n                                <li>Use special characters (e.g., @, $) to mark geometry types</li>\n                                <li>Can be separate fields or added to existing fields</li>\n                                <li>Must be declared in \"tag field\" option</li>\n                            </ul>\n                        </div>\n\n                        <div>\n                            <h4 class=\"font-medium text-gray-700\">Important Notes</h4>\n                            <ul class=\"list-disc list-inside text-gray-600 ml-4\">\n                                <li>Polygons are automatically closed - no need for duplicate vertices</li>\n                                <li>Key field values are case-sensitive</li>\n                                <li>Only one parser mode can be used per schema</li>\n                            </ul>\n                        </div>\n\n\n                    </div>\n\n                         <!-- Important Notes Section -->\n                         <div class=\"mt-8 p-6 bg-blue-50 rounded-lg\">\n                            <h4 class=\"font-semibold text-blue-800 mb-3 text-lg\">Important Considerations</h4>\n                            <ul class=\"list-disc list-inside space-y-1 text-blue-700\">\n                                <li>Field names are limited to 10 characters and specific valid characters</li>\n                                <li>Separator characters must be unique and not overlap with other special characters</li>\n                                <li>Empty fields may not work correctly with whitespace separators</li>\n                                <li>Text replacement only works on exact matches of field content</li>\n                                <li>Parser modes affect how geometry markers and key fields are interpreted</li>\n                            </ul>\n                        </div>\n\n                </div>\n            </div>\n        </div>\n\n        <!-- Field Section Help Content -->\n        <div v-if=\"section === 'field'\" class=\"prose prose-sm\">\n          \n          <div class=\"grid gap-6\">\n                <div class=\"bg-gray-50 p-6 rounded-lg\">\n                    <h4 class=\"font-semibold text-gray-800 text-lg\">Required Field Options</h4>\n                    <div class=\"mt-3 space-y-4\">\n                        <div>\n                            <h4 class=\"font-medium text-gray-700\">name (Required)</h4>\n                            <p class=\"text-gray-600 mt-1\">The identifier for your field (max 10 characters)</p>\n                            <ul class=\"list-disc list-inside text-gray-600 ml-4 mt-2\">\n                                <li>Valid characters: letters, numbers, underscore</li>\n                                <li>Case insensitive - stored in lowercase</li>\n                            </ul>\n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                name = index_fld\n                            </code>\n                        </div>\n\n                        <div>\n                            <h4 class=\"font-medium text-gray-700\">type (Required)</h4>\n                            <p class=\"text-gray-600 mt-1\">Defines the data type of the field</p>\n                            <ul class=\"list-disc list-inside text-gray-600 ml-4 mt-2\">\n                                <li><span class=\"font-medium\">integer:</span> Whole numbers (-1, 0, 100)</li>\n                                <li><span class=\"font-medium\">double:</span> Floating point numbers (-10.05, 0.0)</li>\n                                <li><span class=\"font-medium\">text:</span> Generic text content</li>\n                            </ul>\n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                type = integer\n                            </code>\n                        </div>\n\n                        <div>\n                            <h4 class=\"font-medium text-gray-700\">separator</h4>\n                            <p class=\"text-gray-600 mt-1\">Defines characters that separate fields (required except for last field)</p>\n                            <ul class=\"list-disc list-inside text-gray-600 ml-4 mt-2\">\n                                <li>Can use multiple characters</li>\n                                <li>Special values: \"tab\" and \"space\"</li>\n                            </ul>\n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                separator = ;<br>\n                                separator = tab<br>\n                                separator = space\n                            </code>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"bg-gray-50 p-6 rounded-lg\">\n                    <h3 class=\"font-semibold text-gray-800 text-lg\">Optional Field Settings</h3>\n                    <div class=\"mt-3 space-y-4\">\n                        <div>\n                            <h4 class=\"font-medium text-gray-700\">empty allowed</h4>\n                            <p class=\"text-gray-600 mt-1\">Controls whether fields can be empty</p>\n                            <ul class=\"list-disc list-inside text-gray-600 ml-4 mt-2\">\n                                <li>Default: off</li>\n                                <li>Cannot be used with key or tag fields</li>\n                                <li>Not compatible with merge_separators</li>\n                            </ul>\n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                empty allowed = yes\n                            </code>\n                        </div>\n\n                        <div>\n                            <h4 class=\"font-medium text-gray-700\">change case</h4>\n                            <p class=\"text-gray-600 mt-1\">Converts text field content to upper or lower case</p>\n                            <ul class=\"list-disc list-inside text-gray-600 ml-4 mt-2\">\n                                <li>Values: lower, upper, none</li>\n                                <li>Only applies to text fields</li>\n                            </ul>\n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                change case = lower\n                            </code>\n                        </div>\n\n                        <div>\n                            <h4 class=\"font-medium text-gray-700\">Text Replacement (@)</h4>\n                            <p class=\"text-gray-600 mt-1\">Replaces codes or abbreviations with full text</p>\n                            <ul class=\"list-disc list-inside text-gray-600 ml-4 mt-2\">\n                                <li>Format: @old=new</li>\n                                <li>Case insensitive matching</li>\n                                <li>Max 254 characters for new text</li>\n                            </ul>\n                            <code class=\"block bg-gray-100mt-2 text-sm rounded\">\n                                @ABB = Abbreviation<br>\n                                @P1 = Point of type 1\n                            </code>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        </div>\n      </div>\n  </template>\n  \n  <script>\n  export default {\n    name: 'HelpSidebar',\n    props: {\n      isVisible: {\n        type: Boolean,\n        required: true\n      },\n      section: {\n        type: String,\n        required: true\n      }\n    },\n    computed: {\n      title() {\n        const titles = {\n          parser: 'Parser Section Help',\n          field: 'Field Section Help',\n          imprint: 'Imprint',\n          help: 'Help',\n        }\n        return titles[this.section] || ''\n      }\n    },\n    methods: {\n      close() {\n        this.$emit('close')\n      }\n    }\n  }\n  </script>\n  \n  <style scoped>\n  .prose h4 { @apply text-lg font-semibold mb-2; }\n  .prose h5 { @apply font-semibold mb-1; }\n  .prose ul { @apply list-disc ml-4 mb-2; }\n  .prose li { @apply mb-1; }\n  </style>","import { render } from \"./HelpSidebar.vue?vue&type=template&id=5eec3ea8&scoped=true\"\nimport script from \"./HelpSidebar.vue?vue&type=script&lang=js\"\nexport * from \"./HelpSidebar.vue?vue&type=script&lang=js\"\n\nimport \"./HelpSidebar.vue?vue&type=style&index=0&id=5eec3ea8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5eec3ea8\"]])\n\nexport default __exports__","<template>\n    <div class=\"section\">\n      <!-- Start New Parser Button -->\n      <div v-if=\"!isStarted\" class=\"flex justify-center py-8\">\n        <button\n          @click=\"startNewParser\"\n          class=\"flex items-center gap-2 px-6 py-3 bg-blue-900 text-white rounded-full hover:bg-blue-700 transition-colors shadow-lg hover:shadow-xl\"\n        >\n          <i class=\"pi pi-file-edit text-xl\"></i>\n          {{ $t('parser.startNew') }}\n        </button>\n      </div>\n  \n      <!-- Parser Section Content -->\n      <div \n        v-show=\"isStarted\"\n        class=\"shadow mb-3\" \n        :class=\"isParserSectionInvalid ? 'bg-red-100' : 'bg-white'\"\n      >\n        <div class=\"p-4\">\n          <div \n            class=\"flex justify-between items-center cursor-pointer relative\"\n            @click=\"$emit('toggle-section', 'parser')\"\n          >\n            <div class=\"flex items-center\">\n              <h3 class=\"text-lg font-semibold\">{{ $t('parser.section') }}</h3>\n              <i \n                v-if=\"!isParserSectionInvalid\"\n                class=\"pi pi-check-circle text-lg ml-2 text-green-500\"\n              ></i>\n              <i \n                v-if=\"isParserSectionInvalid\"\n                class=\"pi pi-times text-lg ml-2 text-red-500\"\n              ></i>\n\n            </div>\n            <div class=\"flex items-center\">\n              <button \n                @click.stop=\"$emit('help', 'parser')\" \n                class=\"text-blue-500 hover:text-blue-600\"\n              >\n                <i class=\"pi pi-question-circle\"></i>\n              </button>\n              <i \n                class=\"pi pi-chevron-down text-lg ml-2 transform transition-transform\"\n                :class=\"{'rotate-180': isOpen}\"\n              ></i>\n            </div>\n          </div>\n    \n          <div v-show=\"isOpen\" class=\"mt-4\">\n            <p class=\"text-gray-400 mb-4\">\n              {{ $t('parser.required') }}\n            </p>\n            <div class=\"grid grid-cols-2 gap-4\">\n              <template v-for=\"(value, key) in modelValue\" :key=\"key\">\n                <div class=\"mb-2\">\n                  <div class=\"flex items-center justify-between mb-1\">\n                    <label class=\"text-xs font-medium text-gray-700\">\n                      {{ key }}\n                      <span v-if=\"mandatoryFields.includes(key)\" class=\"text-red-500\">*</span>\n                    </label>\n                  </div>\n                  <select\n                    v-if=\"['key_unique', 'tag_strict'].includes(key) || key === 'tagging_mode'\"\n                    :value=\"value\"\n                    @input=\"updateField(key, $event.target.value)\"\n                    class=\"w-full border rounded p-1 text-sm\"\n                    :class=\"{'border-red-500': mandatoryFields.includes(key) && !value}\"\n                  >\n                    <template v-if=\"['key_unique', 'tag_strict'].includes(key)\">\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </template>\n                    <template v-else>\n                      <option v-for=\"opt in ['min', 'max', 'end', 'none']\" :key=\"opt\" :value=\"opt\">\n                        {{ opt }}\n                      </option>\n                    </template>\n                  </select>\n                  <input\n                    v-else\n                    :value=\"value\"\n                    @input=\"updateField(key, $event.target.value)\"\n                    type=\"text\"\n                    class=\"w-full border rounded p-1 text-sm\"\n                    :class=\"{'border-red-500': mandatoryFields.includes(key) && !value}\"\n                    :placeholder=\"getDefaultValue(key)\"\n                  />\n                </div>\n              </template>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { computed, ref, watch } from 'vue'\n  \n  export default {\n    name: 'ParserSection',\n    props: {\n      modelValue: {\n        type: Object,\n        required: true\n      },\n      mandatoryFields: {\n        type: Array,\n        required: true\n      },\n      isOpen: {\n        type: Boolean,\n        default: false\n      },\n      started: {\n        type: Boolean,\n        default: false\n      }\n    },\n    emits: ['update:modelValue', 'toggle-section', 'help', 'started'],\n    setup(props, { emit }) {\n      const isStarted = ref(props.started)  // Changed from started to isStarted\n  \n      // Watch for changes to the started prop\n      watch(() => props.started, (newValue) => {\n        isStarted.value = newValue\n      }, { immediate: true })\n  \n      const startNewParser = () => {\n        isStarted.value = true\n        emit('started', true)\n        emit('toggle-section', 'parser')\n      }\n  \n      const isParserSectionInvalid = computed(() => {\n        return props.mandatoryFields.some(field => \n          !props.modelValue[field] || props.modelValue[field].trim() === ''\n        )\n      })\n  \n      const getDefaultValue = (key) => {\n        const defaults = {\n          comment_mark: '#',\n          coor_x: 'COORX',\n          coor_y: 'COORY',\n          coor_z: 'COORZ',\n          geom_tag_point: '.',\n          geom_tag_line: '$',\n          geom_tag_poly: '@',\n          no_data: '-1'\n        }\n        return defaults[key] ? `Default: ${defaults[key]}` : ''\n      }\n  \n      const updateField = (key, value) => {\n        const updatedParser = { ...props.modelValue, [key]: value }\n        emit('update:modelValue', updatedParser)\n      }\n  \n      return {\n        isStarted,\n        startNewParser,\n        isParserSectionInvalid,\n        getDefaultValue,\n        updateField\n      }\n    }\n  }\n  </script>","import { render } from \"./ParserSection.vue?vue&type=template&id=324cde64\"\nimport script from \"./ParserSection.vue?vue&type=script&lang=js\"\nexport * from \"./ParserSection.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<!-- components/FieldSection.vue -->\n<template>\n    <div \n      class=\"shadow mb-3 rounded-lg section\" \n      :class=\"isFieldSectionInvalid ? 'bg-red-100' : 'bg-white'\"\n    >\n      <div class=\"p-4\">\n        <!-- Header -->\n        <div \n          class=\"flex justify-between items-center cursor-pointer\"\n          @click=\"$emit('toggle-section', index)\"\n        >\n          <div class=\"flex items-center\">\n            <h3 class=\"text-lg font-semibold\">Field Section {{ index + 1 }} </h3>\n\n            <i \n            v-if=\"!isFieldSectionInvalid\"\n            class=\"pi pi-check-circle text-lg ml-2 text-green-500\"\n            ></i>\n            <i \n            v-if=\"isFieldSectionInvalid\"\n            class=\"pi pi-times text-lg ml-2 text-red-500\"\n            ></i>\n            <span class=\"ms-2 text-gray-400\">{{ modelValue.name }}</span>\n          </div>\n          <div class=\"flex items-center\">\n            <button \n              @click.stop=\"$emit('help', 'field')\" \n              class=\"text-blue-500 hover:text-blue-600 mr-2\"\n            >\n              <i class=\"pi pi-question-circle\"></i>\n            </button>\n            <button \n              @click.stop=\"$emit('remove', index)\" \n              class=\"text-red-500\"\n            >\n              <i class=\"pi pi-trash\"></i>\n            </button>\n            <i \n            class=\"pi pi-chevron-down text-lg ml-2 transform transition-transform\"\n            :class=\"{'rotate-180': isOpen}\"\n            ></i>\n          </div>\n        </div>\n  \n        <!-- Field Content -->\n        <div v-show=\"isOpen\" class=\"mt-4\">\n            <p class=\"text-gray-400 mb-4\">\n            Fill out the required <span class=\"text-red-300\">*</span> field configuration below.\n          </p>\n          <div class=\"grid grid-cols-2 gap-3\">\n            <!-- Name field -->\n            <div class=\"col-span-2\">\n              <label class=\"text-xs font-medium text-gray-700\">\n                Name\n                <span class=\"text-red-500\">*</span>\n              </label>\n              <input\n                :value=\"modelValue.name\"\n                @input=\"updateField('name', $event.target.value)\"\n                type=\"text\"\n                class=\"w-full border rounded p-1 text-sm\"\n                :class=\"{'border-red-500': !modelValue.name || validationErrors[`field-${index}`]}\"\n              />\n              <p v-if=\"validationErrors[`field-${index}`]\" class=\"text-xs text-red-500 mt-1\">\n                {{ validationErrors[`field-${index}`].join(', ') }}\n              </p>\n            </div>\n  \n            <!-- Info field -->\n            <div class=\"col-span-2\">\n              <label class=\"text-xs font-medium text-gray-700\">Info</label>\n              <textarea\n                :value=\"modelValue.info\"\n                @input=\"updateField('info', $event.target.value)\"\n                class=\"w-full border rounded p-1 text-sm\"\n                rows=\"2\"\n              ></textarea>\n            </div>\n  \n            <!-- Type field -->\n            <div class=\"mb-2\">\n              <label class=\"text-xs font-medium text-gray-700\">\n                Type\n                <span class=\"text-red-500\">*</span>\n              </label>\n              <select \n                :value=\"modelValue.type\"\n                @change=\"updateField('type', $event.target.value)\"\n                class=\"w-full border rounded p-1 text-sm\"\n              >\n                <option value=\"integer\">integer</option>\n                <option value=\"double\">double</option>\n                <option value=\"text\">text</option>\n              </select>\n            </div>\n  \n            <!-- Change Case field -->\n            <div class=\"mb-2\">\n              <label class=\"text-xs font-medium text-gray-700\">Change Case</label>\n              <select \n                :value=\"modelValue.change_case\"\n                @change=\"updateField('change_case', $event.target.value)\"\n                class=\"w-full border rounded p-1 text-sm\"\n              >\n                <option value=\"lower\">lower</option>\n                <option value=\"upper\">upper</option>\n              </select>\n            </div>\n  \n            <!-- Empty Allowed field -->\n            <div class=\"mb-2\">\n              <label class=\"text-xs font-medium text-gray-700\">Empty Allowed</label>\n              <select \n                :value=\"modelValue.empty_allowed\"\n                @change=\"updateField('empty_allowed', $event.target.value)\"\n                class=\"w-full border rounded p-1 text-sm\"\n              >\n                <option value=\"yes\">yes</option>\n                <option value=\"no\">no</option>\n              </select>\n            </div>\n  \n            <!-- Merge Separators field -->\n            <div class=\"mb-2\">\n              <label class=\"text-xs font-medium text-gray-700\">Merge Separators</label>\n              <select \n                :value=\"modelValue.merge_separators\"\n                @change=\"updateField('merge_separators', $event.target.value)\"\n                class=\"w-full border rounded p-1 text-sm\"\n              >\n                <option value=\"yes\">yes</option>\n                <option value=\"no\">no</option>\n              </select>\n            </div>\n  \n            <!-- Persistent field -->\n            <div class=\"mb-2\">\n              <label class=\"text-xs font-medium text-gray-700\">Persistent</label>\n              <select \n                :value=\"modelValue.persistent\"\n                @change=\"updateField('persistent', $event.target.value)\"\n                class=\"w-full border rounded p-1 text-sm\"\n              >\n                <option value=\"yes\">yes</option>\n                <option value=\"no\">no</option>\n              </select>\n            </div>\n  \n            <!-- Skip field -->\n            <div class=\"mb-2\">\n              <label class=\"text-xs font-medium text-gray-700\">Skip</label>\n              <select \n                :value=\"modelValue.skip\"\n                @change=\"updateField('skip', $event.target.value)\"\n                class=\"w-full border rounded p-1 text-sm\"\n              >\n                <option value=\"yes\">yes</option>\n                <option value=\"no\">no</option>\n              </select>\n            </div>\n  \n            <!-- Unique field -->\n            <div class=\"mb-2\">\n              <label class=\"text-xs font-medium text-gray-700\">Unique</label>\n              <select \n                :value=\"modelValue.unique\"\n                @change=\"updateField('unique', $event.target.value)\"\n                class=\"w-full border rounded p-1 text-sm\"\n              >\n                <option value=\"yes\">yes</option>\n                <option value=\"no\">no</option>\n              </select>\n            </div>\n  \n            <!-- Quotation and Separator fields -->\n            <div class=\"mb-2\">\n              <label class=\"text-xs font-medium text-gray-700\">Quotation</label>\n              <input\n                :value=\"modelValue.quotation\"\n                @input=\"updateField('quotation', $event.target.value)\"\n                type=\"text\"\n                class=\"w-full border rounded p-1 text-sm\"\n                placeholder=\"'\"\n              />\n            </div>\n  \n            <div class=\"mb-2\">\n              <label class=\"text-xs font-medium text-gray-700\">Separator</label>\n              <input\n                :value=\"modelValue.separator\"\n                @input=\"updateField('separator', $event.target.value)\"\n                type=\"text\"\n                class=\"w-full border rounded p-1 text-sm\"\n                placeholder=\";\"\n              />\n            </div>\n\n            <div class=\"col-span-2 mb-2\">\n  <div class=\"flex justify-between items-center\">\n    <label class=\"text-xs font-medium text-gray-700\">Aliases</label>\n    <span class=\"text-xs text-gray-400\">Optional</span>\n  </div>\n  <textarea\n    :value=\"modelValue.aliases\"\n    @input=\"updateField('aliases', $event.target.value)\"\n    class=\"w-full border rounded p-1 text-sm font-mono\"\n    :class=\"{\n      'border-red-500': aliasesValidationError || validationErrors[`field-${index}-aliases`]\n    }\"\n    rows=\"4\"\n    placeholder=\"@key=value&#10;@key2=value2&#10;@key3=value3\"\n    spellcheck=\"false\"\n  ></textarea>\n  <p v-if=\"aliasesValidationError || validationErrors[`field-${index}-aliases`]\" \n     class=\"text-xs text-red-500 mt-1\">\n    {{ aliasesValidationError || validationErrors[`field-${index}-aliases`] }}\n  </p>\n  <p class=\"text-xs text-gray-500 mt-1\">\n    Add one alias per line using the format @key=value\n  </p>\n</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\nimport { computed, ref, onUnmounted } from 'vue'\n\nexport default {\n  name: 'FieldSection',\n  \n  props: {\n    modelValue: {\n      type: Object,\n      required: true,\n      default: () => ({\n        change_case: 'lower',\n        empty_allowed: 'no',\n        info: '',\n        merge_separators: 'no',\n        name: '',\n        persistent: 'no',\n        quotation: \"'\",\n        skip: 'no',\n        separator: ';',\n        type: 'text',\n        unique: 'no',\n        aliases: ''\n      })\n    },\n    index: {\n      type: Number,\n      required: true\n    },\n    isOpen: {\n      type: Boolean,\n      default: false\n    },\n    validationErrors: {\n      type: Object,\n      default: () => ({})\n    },\n    mandatoryFields: {\n      type: Array,\n      default: () => ['name', 'type']\n    }\n  },\n\n  emits: ['update:modelValue', 'remove', 'toggle-section', 'help', 'validate'],\n\n  setup(props, { emit }) {\n    const aliasesValidationError = ref('')\n    const validationTimeout = ref(null)\n\n    const validateAliases = (value) => {\n  if (!value) return null // Empty is valid as it's optional\n\n  const lines = value.split('\\n').filter(line => line.trim())\n  const keys = new Set()\n  const lowercaseKeys = new Set()\n\n  for (const line of lines) {\n    // Skip empty lines\n    if (!line.trim()) continue\n\n    // Check basic format\n    if (!line.startsWith('@')) {\n      return 'Each line must start with @'\n    }\n\n    // Split into key and value, preserving original spacing\n    const [keyPart, ...valueParts] = line.substring(1).split('=')\n    const key = keyPart.trim()\n    const value = valueParts.join('=').trim()\n    \n    if (!key || !value) {\n      return 'Each line must be in format @key=value'\n    }\n\n    // Only check for internal spaces in key and value\n    const specialCharsRegex = /[^a-zA-Z0-9_]/\n    if (specialCharsRegex.test(key) || specialCharsRegex.test(value)) {\n      return 'Keys and values can only contain letters, numbers, and underscores'\n    }\n\n    // Check for duplicate keys (case-sensitive)\n    if (keys.has(key)) {\n      return `Duplicate key found: ${key}`\n    }\n    keys.add(key)\n\n    // Check for duplicate keys (case-insensitive)\n    const lowercaseKey = key.toLowerCase()\n    if (lowercaseKeys.has(lowercaseKey) && !keys.has(key)) {\n      return `Case-insensitive duplicate key found: ${key}`\n    }\n    lowercaseKeys.add(lowercaseKey)\n  }\n\n  return null // No validation errors\n}\n\nconst updateField = (key, value) => {\n    if (key === 'aliases') {\n        // Always update the value first\n        const updatedField = { ...props.modelValue, [key]: value }\n        emit('update:modelValue', updatedField)\n\n        // Validate with debounce\n        if (validationTimeout.value) clearTimeout(validationTimeout.value)\n        \n        validationTimeout.value = setTimeout(() => {\n            const error = validateAliases(value)\n            aliasesValidationError.value = error\n\n            // Emit validation result to parent\n            emit('validate', props.index, 'aliases', error)\n        }, 300)\n    } else {\n        const updatedField = { ...props.modelValue, [key]: value }\n        emit('update:modelValue', updatedField)\n        \n        if (key === 'name') {\n            emit('validate', props.index, 'name', value)\n        }\n    }\n}\n    // Clean up timeout when component unmounts\n    onUnmounted(() => {\n      if (validationTimeout.value) {\n        clearTimeout(validationTimeout.value)\n      }\n    })\n\n    const isFieldSectionInvalid = computed(() => {\n  // Check for aliases validation errors\n  const hasAliasesError = aliasesValidationError.value || \n                         props.validationErrors[`field-${props.index}-aliases`]\n  \n  // Check for existing validation errors\n  const hasExistingErrors = props.validationErrors[`field-${props.index}`]\n  \n  // Check mandatory fields\n  const hasMissingMandatory = props.mandatoryFields.some(fieldName => \n    !props.modelValue[fieldName] || props.modelValue[fieldName].trim() === ''\n  )\n\n  return hasAliasesError || hasExistingErrors || hasMissingMandatory\n})\n\n    return {\n      isFieldSectionInvalid,\n      updateField,\n      aliasesValidationError\n    }\n  }\n}\n  </script>","import { render } from \"./FieldSection.vue?vue&type=template&id=51cda7ba\"\nimport script from \"./FieldSection.vue?vue&type=script&lang=js\"\nexport * from \"./FieldSection.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <div class=\"flex justify-center my-6\">\n      <button\n        @click=\"$emit('add')\"\n        class=\"flex items-center gap-2 px-6 py-3 bg-gray-700 text-white rounded-full hover:bg-blue-700 transition-colors shadow-lg hover:shadow-xl\"\n      >\n        <i class=\"pi pi-plus text-xl\"></i>\n        Add New Field Section\n      </button>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: 'AddFieldButton',\n    emits: ['add']\n  }\n  </script>","import { render } from \"./AddFieldButton.vue?vue&type=template&id=7f333adc\"\nimport script from \"./AddFieldButton.vue?vue&type=script&lang=js\"\nexport * from \"./AddFieldButton.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import Prism from 'prismjs'\n\nexport const setupPrism = () => {\n  // Define custom language for INI files\n  Prism.languages.ini = {\n    'comment': /#.*/,\n    'section': {\n      pattern: /^\\s*\\[.*?\\]/m,\n      inside: {\n        'section-name': {\n          pattern: /\\[.*?\\]/,\n          inside: {\n            'punctuation': /\\[|\\]/\n          }\n        }\n      }\n    },\n    'key': {\n      pattern: /^\\s*[^\\s=]+(?=\\s*=)/m,\n      alias: 'attr-name'\n    },\n    'value': {\n      pattern: /=.*/,\n      alias: 'attr-value',\n      inside: {\n        'punctuation': /^=/,\n        'number': /\\b\\d+\\.?\\d*\\b/,\n        'boolean': /\\b(?:yes|no|true|false)\\b/i,\n        'string': /'[^']*'|\"[^\"]*\"|[^=\\s]+/,\n        'type': /\\b(?:integer|double|text)\\b/i\n      }\n    }\n  }\n\n  // Add custom styling\n  const additionalStyles = `\n    .token.number {\n      color: #f08d49 !important;\n    }\n    .token.boolean {\n      color: #7ec699 !important;\n    }\n    .token.string {\n      color: #f1fa8c !important;\n    }\n    .token.type {\n      color: #bd93f9 !important;\n    }\n    .token.section {\n      color: #79b8ff !important;\n    }\n    .token.key {\n      color: #e1e4e8 !important;\n    }\n    .token.value {\n      color: #85e89d !important;\n    }\n    .token.comment {\n      color: #959da5 !important;\n      font-style: italic;\n    }\n  `\n\n  // Add styles to document head\n  const styleElement = document.createElement('style')\n  styleElement.textContent = additionalStyles\n  document.head.appendChild(styleElement)\n}\n\n// Optional: Add a function to highlight specific elements\nexport const highlightElement = (element) => {\n  if (element) {\n    Prism.highlightElement(element)\n  }\n}\n\n// Optional: Add a function to highlight all code blocks\nexport const highlightAll = () => {\n  document.querySelectorAll('pre code').forEach((block) => {\n    Prism.highlightElement(block)\n  })\n}\n\n// Optional: Add a function to clean up Prism (if needed)\nexport const cleanupPrism = () => {\n  // Remove custom styles\n  const customStyles = document.querySelector('style[data-prism-custom]')\n  if (customStyles) {\n    customStyles.remove()\n  }\n}","import { render } from \"./App.vue?vue&type=template&id=86be3194\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=86be3194&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export default {\n  language: 'Sprache',\n  loadParser: 'Parser-Datei laden',\n  uploadParser: 'Parser-Datei hochladen',\n  loadSample: 'Beispieldaten laden',\n  download: 'Parser-Datei herunterladen',\n  imprint: 'Impressum',\n  help: 'Hilfe'\n}","export default {\n  startNew: 'Neue Parser-Datei erstellen',\n  section: 'Parser-Bereich',\n  required: 'Füllen Sie die erforderlichen * Feldkonfigurationen unten aus.',\n  code_comment: 'Hier erscheinst eine Voransicht des generierten Parser Codes'\n}","import navigation from '../messages/navigation/de'\nimport parser from '../messages/parser/de'\n\nexport default {\n  navigation,\n  parser\n}","export default {\n  language: 'Language',\n  loadParser: 'Load Parser File',\n  uploadParser: 'Upload parser file',\n  loadSample: 'Load sample data',\n  download: 'Download parser file',\n  imprint: 'Imprint',\n  help: 'Help'\n}","export default {\n  startNew: 'Start New Parser File',\n  section: 'Parser Section',\n  required: 'Fill out the required * field configuration below.',\n  code_comment: 'you will see a preview of your parser file here'\n}","import navigation from '../messages/navigation/en'\nimport parser from '../messages/parser/en'\n\nexport default {\n  navigation,\n  parser\n}","import { createI18n } from 'vue-i18n'\nimport de from './locales/de'\nimport en from './locales/en'\n\nexport default createI18n({\n  legacy: false,\n  locale: 'en',\n  fallbackLocale: 'en',\n  messages: {\n    en,\n    de\n  }\n})","import './assets/tailwind.css'\n\nimport App from './App.vue'\nimport { createApp } from 'vue'\nimport i18n from './i18n'\n\nconst app = createApp(App)\napp.use(i18n)\napp.mount('#app')","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunks2g_parser_generator\"] = self[\"webpackChunks2g_parser_generator\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(5844); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["class","key","id","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","href","_hoisted_4","_hoisted_5","onClick","_cache","$event","_ctx","isDropdownOpen","_hoisted_6","_toDisplayString","$t","_normalizeClass","_hoisted_7","_hoisted_8","for","$setup","uploadisDisabled","_withModifiers","triggerFileUpload","_hoisted_9","loadSampleData","_hoisted_10","_createCommentVNode","type","accept","onChange","args","handleFileUpload","ref","closeDropdown","downloadIni","disabled","isFormValid","_hoisted_11","$i18n","locale","value","_hoisted_12","showHelp","_hoisted_13","_hoisted_14","_createVNode","_component_ParserSection","modelValue","parserSection","mandatoryFields","parser","openSection","showStartLabel","started","hasStarted","onToggleSection","toggleSection","onHelp","onStarted","_Fragment","_renderList","fieldSections","field","index","_createBlock","_component_FieldSection","validationErrors","onRemove","removeFieldSection","onValidate","validateField","_component_AddFieldButton","onAdd","addFieldSection","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","generatedIni","showHelpSidebar","closeHelp","_component_HelpSidebar","section","currentHelpSection","onClose","showToast","_hoisted_19","_hoisted_20","_hoisted_21","_createTextVNode","closeToast","$props","isVisible","$options","close","title","fill","stroke","viewBox","d","_createStaticVNode","name","props","Boolean","required","String","computed","titles","imprint","help","this","methods","$emit","__exports__","isStarted","startNewParser","isParserSectionInvalid","isOpen","includes","onInput","updateField","target","opt","placeholder","getDefaultValue","Object","Array","default","emits","setup","emit","watch","newValue","immediate","some","trim","defaults","comment_mark","coor_x","coor_y","coor_z","geom_tag_point","geom_tag_line","geom_tag_poly","no_data","updatedParser","isFieldSectionInvalid","join","info","rows","change_case","empty_allowed","merge_separators","_hoisted_22","_hoisted_23","persistent","_hoisted_24","_hoisted_25","skip","_hoisted_26","_hoisted_27","unique","_hoisted_28","_hoisted_29","quotation","_hoisted_30","_hoisted_31","separator","_hoisted_32","_hoisted_33","aliases","aliasesValidationError","spellcheck","_hoisted_34","_hoisted_35","Number","validationTimeout","validateAliases","lines","split","filter","line","keys","Set","lowercaseKeys","startsWith","keyPart","valueParts","substring","specialCharsRegex","test","has","add","lowercaseKey","toLowerCase","updatedField","clearTimeout","setTimeout","error","onUnmounted","hasAliasesError","hasExistingErrors","hasMissingMandatory","fieldName","setupPrism","Prism","ini","pattern","inside","alias","additionalStyles","styleElement","document","createElement","textContent","head","appendChild","highlightElement","element","components","HelpSidebar","ParserSection","FieldSection","AddFieldButton","t","useI18n","state","key_field","key_unique","tag_field","tagging_mode","tag_strict","fileError","showTooltip","openFieldIndex","newComment","isParserValid","every","areFieldSectionsValid","mandatoryFieldsValid","hasValidationErrors","length","fieldManagement","fieldIndex","newErrors","errors","validateFieldName","push","newField","scrollManagement","scrollToSection","splice","generateIni","nextTick","scrollContainer","querySelector","preElement","leftPanelItems","querySelectorAll","console","log","targetLineIndex","findIndex","fieldCount","lineHeight","parseInt","window","getComputedStyle","scrollPosition","leftPanelItem","from","find","item","leftPanelY","getBoundingClientRect","top","scrollContainerTop","targetScrollPosition","initialSectionOffset","scrollTo","Math","max","behavior","wasOpen","fileHandling","samplePath","fetch","then","response","text","content","parseIniContent","uiManagement","catch","message","async","file","event","files","endsWith","readFileContent","Promise","resolve","reject","reader","FileReader","onload","result","onerror","Error","readAsText","currentSection","currentAliases","currentFieldIndex","currentField","aliasesString","validationError","slice","trimmedKey","forEach","click","parserEntries","entries","map","regularFields","validAliases","blob","Blob","url","URL","createObjectURL","link","download","body","removeChild","revokeObjectURL","onMounted","style","overflowY","position","block","deep","render","language","loadParser","uploadParser","loadSample","startNew","code_comment","navigation","createI18n","legacy","fallbackLocale","messages","en","de","app","createApp","App","use","i18n","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","r","n","getter","__esModule","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}